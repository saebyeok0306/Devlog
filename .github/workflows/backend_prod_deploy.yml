name: backend deploy

on:
  push:
    paths:
      - "backend/**"
    branches:
      - main
  workflow_dispatch: # Run workflow(수동 실행) 기능 활성화
    branches:
      - main

permissions: write-all

env:
  DEVLOG_GOOGLE_CLIENT_ID: ${{secrets.DEVLOG_GOOGLE_CLIENT_ID}}
  DEVLOG_GOOGLE_CLIENT_SECRET: ${{secrets.DEVLOG_GOOGLE_CLIENT_SECRET}}

jobs:
  test_and_deploy:
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: ./backend

    steps:
      # 1. 환경 설정
      - name: Checkout source code
        uses: actions/checkout@v4

      # 2. Gradle 캐싱 적용
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 3. JDK Setup
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      # 4. gradlew 실행 권한 주기
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 5. Spring Build
      - name: Build with Gradle
        run: ./gradlew clean build

      # 6. build test 결과 업로드
      - name: Upload test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-report
          path: backend/build/reports/tests/test

      # 7. 전송파일 권한 수정
      #    (Actions에서 생성한 파일은 권한을 수정해야 scp로 보낼 때 오류가 안생김)
      - name: Modify permissions
        run: chmod o+rwx build/libs/devlog.jar

      # 8. 서버로 빌드파일 전송하기
      - name: Send jar
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: ${{ secrets.APP_TARGET_PATH }}
          target: ${{ secrets.APP_FOLDER_PATH }}
          strip_components: 3
