plugins {
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'io.blog'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

jacoco {
    toolVersion = "0.8.11"
	// reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

bootJar {
	archiveFileName = "${rootProject.name}.jar"
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.0")
}

dependencies {
	// Web + Security + OAuth
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// JPA + MySQL
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'com.mysql:mysql-connector-j'

	// JWT (JsonWebToken)
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// Oracle Database
	runtimeOnly 'com.oracle.database.jdbc:ojdbc11'
	implementation 'com.oracle.database.security:osdt_cert'
	implementation 'com.oracle.database.security:oraclepki'
	implementation 'com.oracle.database.security:osdt_core'

	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'com.h2database:h2'

	implementation 'org.apache.commons:commons-lang3'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

// 특정 폴더 제외
//sourceSets {
//	main {
//		resources {
//			exclude '**/wallet/**'
//		}
//	}
//}
